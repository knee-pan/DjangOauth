# Generated by Django 3.2.15 on 2022-10-05 06:29

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('machine', '0002_projector'),
    ]

    operations = [
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Machine status', verbose_name='Active')),
                ('serial', models.CharField(max_length=15, unique=True, validators=[django.core.validators.MinLengthValidator(12), django.core.validators.RegexValidator('^[\\d]*$', message='Only digit')])),
                ('mac', models.CharField(max_length=12, unique=True, validators=[django.core.validators.MinLengthValidator(12), django.core.validators.RegexValidator('^[A-F0-9]*$')])),
                ('teamviewer_id', models.CharField(blank=True, max_length=12, null=True, validators=[django.core.validators.MinLengthValidator(10), django.core.validators.RegexValidator('^[\\d]*$', message='Only digit')])),
                ('teamviewer_version', models.CharField(blank=True, max_length=10, null=True)),
                ('check_status', models.BooleanField(default=False, help_text='! Machine will check status on every actions. Connection required.', verbose_name='Check Status')),
                ('resin_type', models.CharField(choices=[('open', 'Open Resin'), ('close', 'Closed Resin')], default='open', max_length=5)),
                ('enable_stl_slc', models.BooleanField(default=False, help_text='Machine can slice stl files.', verbose_name='STL Support')),
                ('software_version', models.CharField(blank=True, max_length=10, null=True, verbose_name='Version (software)')),
                ('ip', models.GenericIPAddressField(blank=True, null=True, unpack_ipv4=True, verbose_name='Ip Address')),
                ('real_plate_x', models.FloatField(default=120.0, help_text='(mm)')),
                ('print_area_x', models.IntegerField(default=1920, verbose_name='Print Area(X)')),
                ('print_area_y', models.IntegerField(default=1080, verbose_name='Print Area(Y)')),
                ('z_distance', models.FloatField(default=114, help_text='Z Distance (mm)')),
                ('led_current', models.PositiveSmallIntegerField(default=750, help_text='51 - 1023', validators=[django.core.validators.MinValueValidator(51), django.core.validators.MaxValueValidator(1023)], verbose_name='Projector Led Power')),
                ('projector_serial', models.CharField(blank=True, max_length=21, validators=[django.core.validators.MinLengthValidator(19), django.core.validators.RegexValidator('^[a-zA-Z0-9]*$', 'Only alphanumeric are allowed.')])),
                ('heating_time', models.PositiveSmallIntegerField(default=30, help_text='Heating (min)', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(60)])),
                ('heater_close_time', models.PositiveSmallIntegerField(default=240, help_text='Heater Close (min)')),
                ('bed_heater_temp_limit', models.PositiveIntegerField(default=65, help_text='Max temp limit for heater. (40-90)', validators=[django.core.validators.MinValueValidator(40), django.core.validators.MaxValueValidator(90)])),
                ('note', models.TextField(blank=True, max_length=500, null=True)),
                ('client_sync', models.DateTimeField(blank=True, null=True)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('autocenter', models.IntegerField(choices=[(0, 'Center Pieces'), (1, 'Center Origin')], default=0)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('machine_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='machines', to='machine.machinetype')),
                ('owner', models.ForeignKey(limit_choices_to={'applications__name': 'MegaPlatform'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='machines', to=settings.AUTH_USER_MODEL)),
                ('profiles', models.ManyToManyField(limit_choices_to={'confirmed': True}, related_name='machines', to='machine.Profile')),
                ('projector_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='machine.projector')),
                ('unconfirmed_profiles', models.ManyToManyField(blank=True, limit_choices_to={'confirmed': False}, to='machine.Profile')),
            ],
            options={
                'permissions': [('can_full_change', 'Can Change Machine Full Permission')],
            },
        ),
    ]
